on day 5 we continued looking into Manipulating and comparing Numpy arrays further

The first thing that we are going to look into today is Aggregation.

Aggregation means performing the same operation on a number of things
. You might have seen different functions to perform the same operations in Numpy. The question is why are there multiple methods for doing the same operations?
and what you should use at what time?
The answer is easy. If you are using Python datatypes such as list or tupples then use Python's methods
and if you are using NumPy arrays then use Numpy's methods
Check out the notebook for details

We have created a massive array to check which method will work the best
for this, you will see in the notebook we are using a  module named Timeit
So, timeit Measure execution time of small code snippets.

and you'll see the results as below
85.9 ms ± 577 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)
1.41 ms ± 160 μs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)

If you want to learn more about the timeit module 
https://docs.python.org/3/library/timeit.html

So the first line belongs to the pythons method and it took 85.9 milliseconds and on the other hand,d the numpy method took only 1.41 milliseconds.
look at how big the difference is

Okay next we will look into more aggregations such as np.mean(), np.max(), np.min(), np.std() - to get the standard deviation and np.var() - to get the variance

Now the question might be what is standard deviation and variance
So standard devation is 
